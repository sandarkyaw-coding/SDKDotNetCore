@page "/blog/edit/{id:int}"
@inject HttpClient httpClient
@inject NavigationManager nav
@inject IJSRuntime jsRuntime

<h3>BlogEdit</h3>
@if(_blog is not null)
{

    <div class="mb-3">
        <label for="" class="form-label">Title</label>
        <input type="text" class="form-control" placeholder="Enter title" @bind-value="_blog.BlogTitle">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Author</label>
        <input type="text" class="form-control" placeholder="enter author" @bind-value="_blog.BlogAuthor">
    </div>
    <div class="mb-3">
        <label for="" class="form-label">Content</label>
        <input type="text" class="form-control" placeholder="enter content" @bind-value="_blog.BlogContent">
    </div>
    <NavLink href="/blog" class="btn btn-outline-dark">Cancel</NavLink>
    <button type="button" class="btn btn-outline-success" @onclick="Update">Update</button>
}
@code {
    [Parameter]
    public int? id { get; set; }

    private BlogModel? _blog = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await httpClient.GetAsync($"api/blog/{id}");
            if (response.IsSuccessStatusCode)
            {
                var jsonStr = await response.Content.ReadAsStringAsync();
                _blog = JsonConvert.DeserializeObject<BlogModel>(jsonStr);
                StateHasChanged();
            }
        }

    }

    private async Task Update()
    {
        var jsonBlog = JsonConvert.SerializeObject(_blog);
        var content = new StringContent(jsonBlog, Encoding.UTF8, Application.Json);
        var response = await httpClient.PutAsync($"api/blog/{id}", content);

        if (response.IsSuccessStatusCode)
        {
            var message = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", message);
            nav.NavigateTo("/blog");
        }
    }

}
